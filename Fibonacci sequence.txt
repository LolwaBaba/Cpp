[x*2| x<-[1..10]]
[2,4,6,8,10,12,14,16,18,20]
Dependant Generators
(x,y)| x<-[1..4],y<-[2..5]]
[(1,2),(1,3),(1,4),(1,5),(2,2),(2,3),(2,4),(2,5),(3,2),(3,3),(3,4),(3,5),(4,2),(4,3),(4,4),(4,5)]
Guards List comprehensions
[x*2 | x<- [1..10], x*2 >=12 ]
[12,14,16,18,20]
Zip function
zip['a','b','c'][1,2,3,4]
[('a',1),('b',2),('c',3)]
take 10 [1..20]
[1,2,3,4,5,6,7,8,9,10]
 
take 10 (iterate (2*)1)
[1,2,4,8,16,32,64,128,256,512]
take 10 (iterate (\x ->(x+3)*2)1)
[1,8,22,50,106,218,442,890,1786,3578]
take 4 (repeat 3)
[3,3,3,3]
Prelude> replicate 3 5
[5,5,5]

Prelude> take 10 (cycle [1,2,3])
[1,2,3,1,2,3,1,2,3,1]
Fibonacci Sequence
let fibs = 0 : 1 : zipWith (+) fibs (tail fibs)
Prelude> take 10 fibs
[0,1,1,2,3,5,8,13,21,34]
  

Fibonacci Sequence
let fibs = 0 : 1 : zipWith (+) fibs (tail fibs)
Prelude> take 10 fibs
[0,1,1,2,3,5,8,13,21,34]
